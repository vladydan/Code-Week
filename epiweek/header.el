;;
;; header.el for header (licence : WTFPL)
;;
;; Made by :   Ivad
;; Mail :      ivanovic.ivad@gmail.com
;;
;; Started on Thu Jun  7 17:33:34 2012 by Ivad
;; Updated on Thu Jun  7 17:36:23 2012 by Ivad
;;

(global-set-key	"" 'choose_header)
(setq write-file-hooks (cons 'choose_update write-file-hooks))

(setq c-mode-l               '((cs . "/*") (cc . "**") (ce . "*/"))
      css-mode-l             '((cs . "/*") (cc . "**") (ce . "*/"))
      cpp-mode-l             '((cs . "//") (cc . "//") (ce . "//"))
      pov-mode-l             '((cs . "//") (cc . "//") (ce . "//"))
      java-mode-l            '((cs . "//") (cc . "//") (ce . "//"))
      latex-mode-l           '((cs . "%%") (cc . "%%") (ce . "%%"))
      lisp-mode-l	     '((cs . ";;") (cc . ";;") (ce . ";;"))
      asm-mode-l             '((cs . ";;") (cc . ";;") (ce . ";;"))
      xdefault-mode-l        '((cs . "!!") (cc . "!!") (ce . "!!"))
      pascal-mode-l          '((cs . "{ ") (cc . "  ") (ce . "}" ))
      makefile-mode-l        '((cs . "##") (cc . "##") (ce . "##"))
      text-mode-l            '((cs . "##") (cc . "##") (ce . "##"))
      fundamental-mode-l     '((cs . "##")	(cc . "##") (ce . "##"))
      html-mode-l            '((cs . "<!--")	(cc . " -- ") (ce . "-->"))
      php-mode-l             '((cs . "#!/usr/bin/php\n<?php")(cc . "//")(ce . "//"))
      nroff-mode-l           '((cs . "\\\"") (cc . "\\\"") (ce . "\\\""))
      sscript-mode-l         '((cs . "#!/bin/sh")  (cc . "##") (ce . "##"))
      perl-mode-l            '((cs . "#!/usr/bin/perl -w") (cc . "## ")(ce . "##"))
      cperl-mode-l           '((cs . "#!/usr/bin/perl -w") (cc . "## ")(ce . "##"))
      ruby-mode-l	     '((cs . "#!/usr/bin/env ruby") (cc . "##")(ce . "##")))

(setq modes '(("C"			. c-mode-l)
	      ("C/l"			. c-mode-l)
	      ("CSS"			. c-mode-l)
	      ("C++"			. cpp-mode-l)
	      ("C++/l"			. cpp-mode-l)
	      ("PoV"			. pov-mode-l)
	      ("Assembler"		. lisp-mode-l)
	      ("Lisp"			. lisp-mode-l)
	      ("Lisp Interaction"	. lisp-mode-l)
	      ("Emacs-Lisp"		. lisp-mode-l)
	      ("OCaml"			. lisp-mode-l)
	      ("Fundamental"		. fundamental-mode-l)
	      ("Shell-script"		. sscript-mode-l)
	      ("Makefile"		. makefile-mode-l)
	      ("BSDmakefile"		. makefile-mode-l)
	      ("GNUmakefile"		. makefile-mode-l)
	      ("Perl"			. cperl-mode-l)
	      ("CPerl"			. cperl-mode-l)
	      ("xdefault"		. xdefault-mode-l)
	      ("java"			. java-mode-l)
	      ("latex"			. latex-mode-l)
	      ("Pascal"			. pascal-mode-l)
	      ("Text"			. text-mode-l)
	      ("HTML"			. html-mode-l)
	      ("PHP"			. php-mode-l)
	      ("Nroff"			. nroff-mode-l)
	      ("TeX"			. latex-mode-l)
	      ("LaTeX"			. latex-mode-l)
	      ("Ruby"			. ruby-mode-l)))

(defun get_comment (lang)
  (cdr (assoc lang (eval (cdr (assoc mode-name modes))))))

(defun get_user_name ()
  (setq name (getenv "NNAME"))
  (if (string= name "")
      (setq name (getenv "USER")))
  name)

(defun update-header ()
  (interactive)
  (setq end (concat " by " (get_user_name)))
  (save-excursion
    (if (buffer-modified-p)
        (progn (goto-char (point-min))
		   (progn (delete-region
			   (progn (beginning-of-line) (point))
			   (progn (end-of-line) (point)))
			  (insert-string (concat begin (current-time-string) end))))))))

(defun choose_update ()
  (interactive)
  (update-header))

(defun file-header ()
  (interactive)
  (setq projname (concat (read-from-minibuffer (format "Type project name : "))))
  (setq group (concat (read-from-minibuffer (format "Type group name : "))))
  (setq licence (concat " (licence : " (read-from-minibuffer (format "Choose a licence : ")) ")"))
  (if (string= licence " (licence : )")
      (setq licence ""))
  (if (string= group "")
      (setq group "")
    (setq group (concat " for " group)))
  (if (string= projname "")
      (setq projname "")
    (setq projname (concat " for " projname)))
  (insert-string (get_comment 'cs))
  (newline)
  (insert-string (concat (get_comment 'cc) " " (buffer-name) projname licence))
  (newline)
  (insert-string (get_comment 'cc))
  (newline)
  (insert-string (concat (get_comment 'cc) " Made by :   " (get_user_name)
                          group))
  (newline)
  (insert-string (concat (get_comment 'cc)" Mail :      " (getenv "EMAIL")))
  (newline)
  (insert-string (get_comment 'cc))
  (newline)
  (insert-string (concat (get_comment 'cc) " Started on "
			 (current-time-string) " by " (get_user_name)))
  (newline)
  (insert-string (concat (get_comment 'cc) " Updated on "
			 (current-time-string) " by " (get_user_name)))
  (newline)
  (insert-string (get_comment 'ce))
  (newline))

(defun choose_header ()
  (interactive)
  (file-header))
